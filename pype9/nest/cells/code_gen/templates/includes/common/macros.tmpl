{% macro map_required_vars_locally(expressions, component_class, component_name, unit_handler) %}
// Map required variables to local namespace
    {% set required = component_class.required_for(expressions) %}
    {% for sv, units in unit_handler.assign_units_to_variables(required.state_variables) %}
const double_t& {{sv.name}} = S_.y_[{{component_name}}::State_::{{sv.name}}_INDEX];  // ({{units}})
    {% endfor %}
    {% for param, units in unit_handler.assign_units_to_variables(required.parameters) %}
const double_t& {{param.name}} = P_.{{param.name}};  // ({{units}})
    {% endfor %}
    {% for port, units in unit_handler.assign_units_to_variables(required.ports) %}
const double_t& {{port.name}} = B_.{{port.name}}_value;  // ({{units}})
    {% endfor %}
    {% for const, value, units in unit_handler.assign_units_to_constants(required.constants) %}
const static double_t {{const.name}} = {{value}};  // ({{units}})
    {% endfor %}
    {% for rv, scale, units in unit_handler.assign_units_to_constants(required.random_variables) %}
const double_t& {{rv.name}} = {{scale}} * {{get_random_function(rv)}}  // ({{units}})
    {% endfor %}
    {% for alias, scaled_rhs, units  in unit_handler.scale_expressions(required.expressions) %}
{# Is a Piecewise statement 
        {% if hasasttr(scaled_expr, 'pieces') %}
const double_t& {{alias.name}};  // ({{units}})
            {% for piece in scaled_expr.pieces %}
{{elseif(loop.first)}} if ({{piece.condition}}) {
    {{alias.name}} = {{piece.rhs_cstr}};
            {%- endfor %}
} else {
    {{alias.name}} = {{scaled_expr.otherwise.rhs_cstr}};
}
        {% else %}#}
const double_t& {{alias.name}} = {{scaled_expr.rhs_cstr}};  // ({{units}})
        {#{% endif %}#}
    {% endfor %}
{% endmacro %}

{% macro set_triggers(regime, component_class, component_name, unit_handler) %}
{{map_required_vars_locally(regime.all_triggers(), component_class, component_name, unit_handler)}}
    {% for oc in regime.on_conditions %}
B_.{{regime.name}}_trigger_{{regime.index_of(oc)}}_active = !({{oc.trigger.rhs_cstr}});
    {% endfor %}
{% endmacro %}