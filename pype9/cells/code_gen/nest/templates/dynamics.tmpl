{#
   NEST dynamics template

   This template defines a C++ function of the form:

   int ModelName_dynamics (double t, N_Vector y, N_Vector f, void* pnode)

   if using the CVODE/IDA solvers, or

   int ModelName_dynamics (double t, const double y[], double f[], void* pnode)

   if using the GSL ODE solvers.
   The function computes the derivatives of all states defined in the system.

   Template variables are:

   - ode_solver: the current used solver method; can be "cvode" "ida" or "gsl"
   - ModelName: the name of the current system
   - localVars: list of strings with the name of all local variables appearing in the system
   - parameterDefs - the parameter equations of the form "name = params->name"
                     which retrieve parameter values from the params structure and assign it
                     to local variables
   - ratePrevEqDefs - a list of equations that retrieve the state values computed at the previous
                      time step and assign them to local variables
   - eqOrderDefs - topologically sorted list of strings with
                   external, assignment, reaction, pool equations in C++ syntax
   - rateOrderDefs - list of strings with the rate equatins in C++ syntaxa

   Authors: Thomas G. Close and Ivan Raikov
   Copyright Okinawa Institute of Science and Technology Graudate University 2014
#}

//-----------------------------------------------//
// This section was generated from dynamics.tmpl //
//-----------------------------------------------//
{% for regime in componentclass.regimes %}
    {%- if ode_solver in ('cvode', 'ida') -%}
extern "C" int {{component_name}}_{{regime.name}}_dynamics(double t_, N_Vector y_, N_Vector f_, void* pnode_) {
    {% else %}
extern "C" int {{component_name}}_{{regime.name}}_dynamics(double t_, const double y_[], double f_[], void* pnode_) {
    {% endif %}

    // Get a reference to the model
    assert(pnode_);
    const {{component_name}}& node_ = *(reinterpret_cast<{{component_name}}*>(pnode_));

    // Map states used in dynamics to current namespace
    {% for state in componentclass.state_variables %}
    const double_t {{state.name}} = ITEM(y_, {{component_name}}::State_::{{state.name}}_INDEX);
    {% endfor %}

    {% set dp = componentclass.required_for(regime.time_derivatives) %}

    // Map parameters used in dynamics to current namespace
    {% for param in dp.parameters %}
    const double_t {{param.name}} = node_.P_.{{param.name}};
    {% endfor %}

    // Map port buffers to current namespace
    {% for port in dp.ports %}
    const double_t {{port.name}} = node_.B_.{{port.name}}_value;
    {% endfor %}

    // Add constants
    {% for const in dp.constants %}
        {% set conv = componentclass.unit_conversion_factor(const.units) %}
        {% set conv_value = conv[0] * const.value + conv[1] %}
    const static double_t {{const.name}} = {{conv_value}}; // {{const.value}} ({{const.units.name}})
    {% endfor %}

    // Evaluate aliases used in differential equations
    {% for expr in dp.expressions %}
    const double_t {{expr.lhs}} = {{expr.rhs_cstr}};
    {% endfor %}

    // Evaluate differential equations
    {% for td in regime.time_derivatives %}
    ITEM(f_, {{component_name}}::State_::{{td.dependent_variable}}_INDEX) = {{td.rhs_cstr}};
    {% endfor %}

    {% if ode_solver in ('cvode', 'ida') %}
    return 0;
    {% else %}
    return GSL_SUCCESS;
    {% endif %}
}
{% endfor %}
// ------------------- dynamics.tmpl ------------------------//