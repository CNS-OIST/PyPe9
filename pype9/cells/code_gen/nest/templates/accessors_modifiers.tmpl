{# This template adds a accessors and modifiers for the Parameter and State 
   classes

   Authors: Thomas G. Close and Ivan Raikov
   Copyright Okinawa Institute of Science and Technology Graudate University 2014
#}


//----------------------------------------------------------//
// This section was generated from accessors_modifiers.tmpl //
//----------------------------------------------------------//

void {{component_name}}::Parameters_::get (DictionaryDatum &d) const {

{# TODO: Should change this to names::{{name}}, {{name}} once I work out where
         to put the "names" declarations (probably in the header#}
    // Update dictionary from internal parameters, scaling if required.
{% for p in componentclass.parameters %}
    def<double_t>(d, "{{p.name}}", {{p.name}}{% if name in parameter_scales %} / {{parameter_scales[name]}}{% endif %});
{% endfor %}

}

void {{component_name}}::Parameters_::set (const DictionaryDatum &d) {

    // Update internal parameters from dictionary
{% for p in componentclass.parameters %}
    updateValue<double_t>(d, "{{p.name}}", {{p.name}});
{% endfor %}

    // Scale parameters as required
{# Not sure if this is necessary     
{% for name, scale in parameter_scales) %}
    {{name}} *= {{scale}};  
{% endfor %}
#}
}


void {{component_name}}::State_::get (DictionaryDatum &d) const {

    // Get states from internal variables
{% for i, sv in enumerate(componentclass.dynamics.state_variables) %}
    def<double_t>(d, "{{sv.name}}", y_[{{i}}]);
{% endfor %}
{# FIXME: Need to include special handling of v->V_m
{% if ("v" in stateIndexMap) %}
    def<double_t>(d, names::V_m, y_[{{stateIndexMap["v"]}}]);
{% endif %}
#}
 
}
    
void {{component_name}}::State_::set (const DictionaryDatum &d, const Parameters_&) {

    // Set internal state variables from dictionary values
{% for i, sv in enumerate(componentclass.dynamics.state_variables) %}
    updateValue<double_t>(d, "{{sv.name}}", y_[{{i}}]);
{% endfor %}
{# FIXME: Need to include special handling of v->V_m
{% if ("v" in stateIndexMap) %}
   updateValue<double_t>(d, names::V_m, y_[{{stateIndexMap["v"]}}]);
{% endif %}
#}
    
}

// ------------------- accessors_modifiers.tmpl ------------------------//