--- nest/examples/MyModule/pif_psc_alpha.h	2017-09-22 21:07:56.000000000 +1000
+++ nest-2.10/examples/MyModule/pif_psc_alpha.h	2017-09-22 21:11:33.000000000 +1000
@@ -23,23 +23,19 @@
 #ifndef PIF_PSC_ALPHA_H
 #define PIF_PSC_ALPHA_H
 
-// Includes from nestkernel:
-#include "archiving_node.h"
-#include "connection.h"
+#include "nest.h"
 #include "event.h"
-#include "nest_types.h"
+#include "archiving_node.h"
 #include "ring_buffer.h"
+#include "connection.h"
 #include "universal_data_logger.h"
-
-// Includes from sli:
 #include "dictdatum.h"
 
 namespace mynest
 {
 
 /* BeginDocumentation
-Name: pif_psc_alpha - Perfect integrate-and-fire neuron model with alpha PSC
-                      synapse.
+Name: pif_psc_alpha - Perfect integrate-and-fire neuron model with alpha PSC synapse.
 
 Description:
 pif_psc_alpha implements a non-leaky integrate-and-fire neuron with
@@ -51,13 +47,11 @@
 
    C_m dV/dt  = I_syn(t) + I_e
 
-   I_syn(t)   = Sum_{t_{j,k} < t} w_j x (t-t_{j,k}) x e/tau_syn x
-                                                        e^{-(t-t_{j,k})/tau_syn}
+   I_syn(t)   = Sum_{t_{j,k} < t} w_j x (t-t_{j,k}) x e/tau_syn x e^{-(t-t_{j,k})/tau_syn}
 
 where t_{j,k} is the time of the k-th spike arriving from neuron j, and w_j is
-the weight of the synapse from neuron j onto the present neuron. The alpha
-function is normalized by amplitude, i.e., the maximum input current for any
-spike is w_j.
+the weight of the synapse from neuron j onto the present neuron. The alpha function
+is normalized by amplitude, i.e., the maximum input current for any spike is w_j.
 
 Parameters:
 C_m      double - Membrane capacitance, in pF
@@ -95,16 +89,13 @@
 {
 public:
   /**
-   * The constructor is only used to create the model prototype in the model
-   * manager.
+   * The constructor is only used to create the model prototype in the model manager.
    */
   pif_psc_alpha();
 
   /**
-   * The copy constructor is used to create model copies and instances of the
-   * model.
-   * @node The copy constructor needs to initialize the parameters and the
-   * state.
+   * The copy constructor is used to create model copies and instances of the model.
+   * @node The copy constructor needs to initialize the parameters and the state.
    *       Initialization of buffers and interal variables is deferred to
    *       @c init_buffers_() and @c calibrate().
    */
@@ -154,7 +145,7 @@
   void calibrate();
 
   //! Take neuron through given time interval
-  void update( nest::Time const&, const long, const long );
+  void update( nest::Time const&, const nest::long_t, const nest::long_t );
 
   // The next two classes need to be friends to access the State_ class/member
   friend class nest::RecordablesMap< pif_psc_alpha >;
@@ -172,8 +163,8 @@
    *       all its members are copied properly by the default copy constructor
    *       and assignment operator. Important:
    *       - If Parameters_ contained @c Time members, you need to define the
-   *         assignment operator to recalibrate all members of type @c Time .
-   *         You may also want to define the assignment operator.
+   *         assignment operator to recalibrate all members of type @c Time . You
+   *         may also want to define the assignment operator.
    *       - If Parameters_ contained members that cannot copy themselves, such
    *         as C-style arrays, you need to define the copy constructor and
    *         assignment operator to copy those members.
@@ -203,15 +194,14 @@
    * These are the state variables that are advanced in time by calls to
    * @c update(). In many models, some or all of them can be set by the user
    * through @c SetStatus. The state variables are initialized from the model
-   * prototype when the node is created. State variables are reset by @c
-   * ResetNetwork.
+   * prototype when the node is created. State variables are reset by @c ResetNetwork.
    *
    * @note State_ need neither copy constructor nor @c operator=(), since
    *       all its members are copied properly by the default copy constructor
    *       and assignment operator. Important:
    *       - If State_ contained @c Time members, you need to define the
-   *         assignment operator to recalibrate all members of type @c Time .
-   *         You may also want to define the assignment operator.
+   *         assignment operator to recalibrate all members of type @c Time . You
+   *         may also want to define the assignment operator.
    *       - If State_ contained members that cannot copy themselves, such
    *         as C-style arrays, you need to define the copy constructor and
    *         assignment operator to copy those members.
@@ -228,8 +218,8 @@
      * Construct new default State_ instance based on values in Parameters_.
      * This c'tor is called by the no-argument c'tor of the neuron model. It
      * takes a reference to the parameters instance of the model, so that the
-     * state can be initialized in accordance with parameters, e.g.,
-     * initializing the membrane potential with the resting potential.
+     * state can be initialized in accordance with parameters, e.g., initializing
+     * the membrane potential with the resting potential.
      */
     State_( const Parameters_& );
 
@@ -250,10 +240,9 @@
    * Buffers must be initialized by @c init_buffers_(), which is called before
    * @c calibrate() on the first call to @c Simulate after the start of NEST,
    * ResetKernel or ResetNetwork.
-   * @node Buffers_ needs neither constructor, copy constructor or assignment
-   *       operator, since it is initialized by @c init_nodes_(). If Buffers_
-   *       has members that cannot destroy themselves, Buffers_ will need a
-   *       destructor.
+   * @node Buffers_ needs neither constructor, copy constructor or assignment operator,
+   *       since it is initialized by @c init_nodes_(). If Buffers_ has members that
+   *       cannot destroy themselves, Buffers_ will need a destructor.
    */
   struct Buffers_
   {
@@ -261,8 +250,7 @@
     Buffers_( const Buffers_&, pif_psc_alpha& );
 
     nest::RingBuffer spikes;   //!< Buffer incoming spikes through delay, as sum
-    nest::RingBuffer currents; //!< Buffer incoming currents through delay,
-                               //!< as sum
+    nest::RingBuffer currents; //!< Buffer incoming currents through delay, as sum
 
     //! Logger for all analog data
     nest::UniversalDataLogger< pif_psc_alpha > logger_;
@@ -272,10 +260,9 @@
    * Internal variables of the neuron.
    * These variables must be initialized by @c calibrate, which is called before
    * the first call to @c update() upon each call to @c Simulate.
-   * @node Variables_ needs neither constructor, copy constructor or assignment
-   *       operator, since it is initialized by @c calibrate(). If Variables_
-   *       has members that cannot destroy themselves, Variables_ will need a
-   *       destructor.
+   * @node Variables_ needs neither constructor, copy constructor or assignment operator,
+   *       since it is initialized by @c calibrate(). If Variables_ has members that
+   *       cannot destroy themselves, Variables_ will need a destructor.
    */
   struct Variables_
   {
@@ -296,7 +283,7 @@
    * @{
    */
   //! Read out the real membrane potential
-  double
+  nest::double_t
   get_V_m_() const
   {
     return S_.V_m;
@@ -309,8 +296,8 @@
    * which are one instance each of the parameters, state, buffers and variables
    * structures. Experience indicates that the state and variables member should
    * be next to each other to achieve good efficiency (caching).
-   * @note Devices require one additional data member, an instance of the @c
-   *       Device child class they belong to.
+   * @note Devices require one additional data member, an instance of the @c Device
+   *       child class they belong to.
    * @{
    */
   Parameters_ P_; //!< Free parameters.
@@ -339,8 +326,7 @@
 }
 
 inline nest::port
-mynest::pif_psc_alpha::handles_test_event( nest::SpikeEvent&,
-  nest::port receptor_type )
+mynest::pif_psc_alpha::handles_test_event( nest::SpikeEvent&, nest::port receptor_type )
 {
   // You should usually not change the code in this function.
   // It confirms to the connection management system that we are able
@@ -352,8 +338,7 @@
 }
 
 inline nest::port
-mynest::pif_psc_alpha::handles_test_event( nest::CurrentEvent&,
-  nest::port receptor_type )
+mynest::pif_psc_alpha::handles_test_event( nest::CurrentEvent&, nest::port receptor_type )
 {
   // You should usually not change the code in this function.
   // It confirms to the connection management system that we are able
@@ -365,8 +350,7 @@
 }
 
 inline nest::port
-mynest::pif_psc_alpha::handles_test_event( nest::DataLoggingRequest& dlr,
-  nest::port receptor_type )
+mynest::pif_psc_alpha::handles_test_event( nest::DataLoggingRequest& dlr, nest::port receptor_type )
 {
   // You should usually not change the code in this function.
   // It confirms to the connection management system that we are able
