--- nest/examples/MyModule/mymodule.cpp	2017-09-22 21:07:18.000000000 +1000
+++ nest-2.10/examples/MyModule/mymodule.cpp	2017-09-22 21:11:33.000000000 +1000
@@ -20,60 +20,40 @@
  *
  */
 

 #include "config.h"

-#include "connection_manager_impl.h"
+#include "network.h"
+#include "model.h"
-#include "genericmodel_impl.h"
-#include "kernel_manager.h"
-#include "model.h"
-#include "model_manager_impl.h"

 
 // -- Interface to dynamic module loader ---------------------------------------
 
-#if defined( LTX_MODULE ) | defined( LINKED_MODULE )
 mynest::MyModule mymodule_LTX_mod;
-#endif

 // -- DynModule functions ------------------------------------------------------
 
 mynest::MyModule::MyModule()

@@ -110,12 +188,13 @@
 {
   /* Register a neuron or device model.
      Give node type as template argument and the name as second argument.
+     The first argument is always a reference to the network.
   */
-  nest::kernel().model_manager.register_node_model< pif_psc_alpha >(
-    "pif_psc_alpha" );
+  nest::register_model< pif_psc_alpha >( nest::NestModule::get_network(), "pif_psc_alpha" );
 
   /* Register a synapse type.
      Give synapse type as template argument and the name as second argument.
+     The first argument is always a reference to the network.
 
      There are two choices for the template argument:
          - nest::TargetIdentifierPtrRport
@@ -125,12 +204,15 @@
      even further, but limits the number of available rports. Please see
      Kunkel et al, Front Neurofinfom 8:78 (2014), Sec 3.3.2, for details.
   */
-  nest::kernel()
-    .model_manager.register_connection_model< DropOddSpikeConnection< nest::
-        TargetIdentifierPtrRport > >( "drop_odd_synapse" );
-
-  // Register connection rule.
-  nest::kernel().connection_manager.register_conn_builder< StepPatternBuilder >(
-    "step_pattern" );
+  nest::register_connection_model< DropOddSpikeConnection< nest::TargetIdentifierPtrRport > >(
+    nest::NestModule::get_network(), "drop_odd_synapse" );
+
+  /* Register a SLI function.
+     The first argument is the function name for SLI, the second a pointer to
+     the function object. If you do not want to overload the function in SLI,
+     you do not need to give the mangled name. If you give a mangled name, you
+     should define a type trie in the mymodule-init.sli file.
+  */
+  i->createcommand( "StepPatternConnect_Vi_i_Vi_i_l", &stepPatternConnect_Vi_i_Vi_i_lFunction );
 
 } // MyModule::init()
