
/* This file was generated by PyPe9 version 0.1 on Wed 25 Mar 15 02:01:59PM */

#ifndef IZHIKEVICHBUILTIN_H
#define IZHIKEVICHBUILTIN_H

//------------------------------------------------------//
// This section was generated from header-includes.tmpl //
//------------------------------------------------------//
#include "nest.h"
#include "event.h"
#include "archiving_node.h"
#include "ring_buffer.h"
#include "connection.h"
#include "universal_data_logger.h"

namespace nineml
{

  class Network;

  //------------------------------------------------------//
  // This section was generated from solver-preludes.tmpl //
  //------------------------------------------------------//
  // ------------------- solver-preludes.tmpl ------------------------//

  class IzhikevichBuiltIn : public nest::Archiving_Node
  {

   public:

    IzhikevichBuiltIn();
    IzhikevichBuiltIn(const IzhikevichBuiltIn &);
    ~IzhikevichBuiltIn();

    /**
     * Import sets of overloaded virtual functions.
     * This is necessary to ensure proper overload and overriding resolution.
     * @see http://www.gotw.ca/gotw/005.htm.
     */
    using nest::Node::connect_sender;
    using nest::Node::handle;

    nest::port check_connection(nest::Connection&, nest::port);

    void handle(nest::SpikeEvent &);
    void handle(nest::CurrentEvent &);
    void handle(nest::DataLoggingRequest &);

    nest::port connect_sender(nest::SpikeEvent &, nest::port);
    nest::port connect_sender(nest::CurrentEvent &, nest::port);
    nest::port connect_sender(nest::DataLoggingRequest &, nest::port);

    void get_status(DictionaryDatum &) const;
    void set_status(const DictionaryDatum &);

   private:
    friend class nest::RecordablesMap<IzhikevichBuiltIn>;
    friend class nest::UniversalDataLogger<IzhikevichBuiltIn>;

    void init_state_(const nest::Node & proto);
    void init_buffers_();
    void calibrate();

    void update(nest::Time const &, const nest::long_t, const nest::long_t);

    // ----------------------------------------------------------------

    /**
     * Independent parameters of the model.
     */
    struct Parameters_ {
      nest::double_t a_;
      nest::double_t b_;
      nest::double_t c_;
      nest::double_t d_;

      /** External DC current */
      nest::double_t I_e_;

      /** Threshold */
      nest::double_t V_th_;

      /** Lower bound */
      nest::double_t V_min_;

	  /** Use standard integration numerics **/	
      bool consistent_integration_;

      Parameters_();  //!< Sets default parameter values

      void get(DictionaryDatum&) const;  //!< Store current values in dictionary
      void set(const DictionaryDatum&);  //!< Set values from dicitonary
    };

    // ----------------------------------------------------------------

    /**
     * State variables of the model.
     */
    struct State_ {
      double_t     v_; // membrane potential
      double_t     u_; // membrane recovery variable
      double_t     I_; // input current


      /** Accumulate spikes arriving during refractory period, discounted for
	  decay until end of refractory period.
      */

      State_();  //!< Default initialization

      void get(DictionaryDatum&, const Parameters_&) const;
      void set(const DictionaryDatum&, const Parameters_&);
    };

    // ----------------------------------------------------------------

    /**
     * Buffers of the model.
     */
    struct Buffers_ {
      /**
       * Buffer for recording
       */
      Buffers_(IzhikevichBuiltIn &);
      Buffers_(const Buffers_ &, IzhikevichBuiltIn &);
      nest::UniversalDataLogger<IzhikevichBuiltIn> logger_;

      /** buffers and sums up incoming spikes/currents */
      nest::RingBuffer spikes_;
      nest::RingBuffer currents_;
    };

    // ----------------------------------------------------------------

    /**
     * Internal variables of the model.
     */
    struct Variables_ {};

    // Access functions for UniversalDataLogger -----------------------

    //! Read out the membrane potential
    nest::double_t get_V_m_() const { return S_.v_; }
    //! Read out the recovery variable
    nest::double_t get_U_m_() const { return S_.u_; }

    // ----------------------------------------------------------------

    /**
     * @defgroup iaf_psc_alpha_data
     * Instances of private data structures for the different types
     * of data pertaining to the model.
     * @note The order of definitions is important for speed.
     * @{
     */
    Parameters_ P_;
    State_      S_;
    Variables_  V_;
    Buffers_    B_;

    //! Mapping of recordables names to access functions
    static nest::RecordablesMap<IzhikevichBuiltIn> recordablesMap_;
    /** @} */

  };

  inline
  nest::port IzhikevichBuiltIn::check_connection(nest::Connection& c, nest::port receptor_type)
  {
    nest::SpikeEvent e;
    e.set_sender(*this);
    c.check_event(e);
    return c.get_target()->connect_sender(e, receptor_type);
  }

  inline
  nest::port IzhikevichBuiltIn::connect_sender(nest::SpikeEvent&, nest::port receptor_type)
  {
    if (receptor_type != 0)
      throw nest::UnknownReceptorType(receptor_type, this->get_name());
    return 0;
  }

  inline
  nest::port IzhikevichBuiltIn::connect_sender(nest::CurrentEvent&, nest::port receptor_type)
  {
    if (receptor_type != 0)
      throw nest::UnknownReceptorType(receptor_type, this->get_name());
    return 0;
  }

  inline
  nest::port IzhikevichBuiltIn::connect_sender(nest::DataLoggingRequest &dlr, nest::port receptor_type)
  {
    if (receptor_type != 0)
      throw nest::UnknownReceptorType(receptor_type, this->get_name());
    return B_.logger_.connect_logging_device(dlr, recordablesMap_);
  }

  inline
  void IzhikevichBuiltIn::get_status(DictionaryDatum &d) const
  {
    P_.get(d);
    S_.get(d, P_);
    nest::Archiving_Node::get_status(d);
    (*d)[nest::names::recordables] = recordablesMap_.get_list();
  }

  inline
  void IzhikevichBuiltIn::set_status(const DictionaryDatum &d)
  {
    Parameters_ ptmp = P_;  // temporary copy in case of errors
    ptmp.set(d);                       // throws if BadProperty
    State_      stmp = S_;  // temporary copy in case of errors
    stmp.set(d, ptmp);                 // throws if BadProperty

    // We now know that (ptmp, stmp) are consistent. We do not
    // write them back to (P_, S_) before we are also sure that
    // the properties to be set in the parent class are internally
    // consistent.
    nest::Archiving_Node::set_status(d);

    // if we get here, temporaries contain consistent set of properties
    P_ = ptmp;
    S_ = stmp;
  }

} // namespace nest

#endif /* #ifndef IZHIKEVICH_BUILT_IN_H */
