/*
 *  TestModule.cpp
 *
 *  This file was generated by PyPe9 version 0.1 on Wed 25 Mar 15 10:40:20AM
 * 
 *  Copyright (C) 2015 Thomas G. Close
 *
 *  PyPe9 is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 */

// include necessary NEST headers
#include "config.h"
#include "network.h"
#include "model.h"
#include "dynamicloader.h"
#include "genericmodel.h"
#include "generic_connector.h"
#include "booldatum.h"
#include "integerdatum.h"
#include "tokenarray.h"
#include "exceptions.h"
#include "sliexceptions.h"
#include "nestmodule.h"

// include headers with your own stuff
#include "TestModule.h"
#include "Test.h"

// -- Interface to dynamic module loader ---------------------------------------

/*
 * The dynamic module loader must be able to find your module.
 * You make the module known to the loader by defining an instance of your
 * module class in global scope. This instance must have the name
 *
 * <modulename>_LTX_mod
 *
 * The dynamicloader can then load modulename and search for symbol "mod" in it.
 */

nineml::MyModule TestModule_LTX_mod;

// -- DynModule functions ------------------------------------------------------

nineml::MyModule::MyModule()
  {
#ifdef LINKED_MODULE
     // register this module at the dynamic loader
     // this is needed to allow for linking in this module at compile time
     // all registered modules will be initialized by the main app's dynamic loader
     nest::DynamicLoaderModule::registerLinkedModule(this);
#endif
   }

nineml::MyModule::~MyModule()
   {}

   const std::string nineml::MyModule::name(void) const
   {
     return std::string("My NEST Module"); // Return name of the module
   }

   const std::string nineml::MyModule::commandstring(void) const
   {
     // Instruct the interpreter to load TestModule-init.sli
     return std::string("(TestModule-init) run");
   }


  //-------------------------------------------------------------------------------------

  void nineml::MyModule::init(SLIInterpreter *i, nest::Network*)
  {
    /* Register a neuron or device model.
       Give node type as template argument and the name as second argument.
       The first argument is always a reference to the network.
       Return value is a handle for later unregistration.
    */
    nest::register_model<Test>(nest::NestModule::get_network(),
                                        "Test");

  }  // MyModule::init()


