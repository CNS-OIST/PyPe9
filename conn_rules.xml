<?xml version="1.0" encoding="UTF-8"?>
<NineML>
<Annotations>
<Comment>I suspect I substitute in the most recent development version of nineml.</Comment>
</Annotations>

<NineML xmlns="http://nineml.net/9ML/2.0">

<Annotations>
<Comment>I suspect I need one or more of the following line(s), in order to make the code work.
Is it a mistake that the power of micro metres is -3, as opposed to -6
</Comment>
</Annotations>

<Dimension name="dimensionless"/>
<Dimension name="length" l="1"/>
<Unit symbol="um" dimension="length" power="-6"/>

<Dimension name="length" l="1"/>
<Unit symbol="us" dimension="time_step" power="-6"/>


<ComponentClass name="DecayingPolySphere">
    <Annotations>
    <Comment>p is a probability so it does not have a physical dimension.</Comment>
    </Annotations>

    <Parameter name="p", dimension="dimensionless"/>

    <Annotations>
    <Comment>cut_off is a constant distance. In Shyam's code this value is 
    referred to as the radius. This radius takes the value of 100um for a standard 
    dend radius and also a Golgi Cell Apical Dendrite. 
    A MFBundle radius is 70um however.
    A Goc Basolateral dend radius is 60um.
    to summarise cut_off can take the values:
    100,
    70,
    60,
    These three values shall be supplied as a parameter after object instantiation.
    </Comment>
    </Annotations>
    
    <Parameter name="cutoff" dimension="length"/>
    <PropertyRecievePort name="x_src" dimension="length"/>
    <PropertyRecievePort name="x_dst" dimension="length"/>
    <PropertyRecievePort name="y_src" dimension="length"/>
    <PropertyRecievePort name="y_dst" dimension="length"/>
    <PropertyRecievePort name="z_src" dimension="length"/>
    <PropertyRecievePort name="z_dst" dimension="length"/>
    
    
    <ConnectionRule>
        <RandomVariable name="rand" units="um">

        <Annotations>
        <Comment>
         Cleft distances, a radius whose origin is presynaptic.
         
         http://www.uncertml.org/distributions/uniform 
    
        <un:UniformDistribution xmlns:un="http://www.uncertml.org/2.0">
        <un:minimum>0</un:minimum>
        <un:maximum>cutoff</un:maximum>   
        </un:UniformDistribution>

        </Comment>
        </Annotations>


        </RandomVariable>
            <Annotations>
            <Comment>The following lines effectively mean assigning the Mathinline expression below to the variable s.
            This should make the s the euclidian distance between the source and the destination in x,y and z.
            </Comment>
            <Annotations>
    

        <Alias name="s">
            <MathInline>sqrt((x_source-x_dest)^2+(y_source-y_dest)^2+(z_source-z_dest)^2)</MathInline>       
        </Alias>
    
        <ConnectCondition>
            <Annotations>
            <Comment>The following line describes the left hand side of an asymptote used as a distribution to draw 
            random numbers from, this is used to in certain circumstances to make the probability of connection a 
            negative exponential function of distance. In other circumstnaces the connection condition will be uniform across all distances within a certain range.        
            
            
        
        
            Is the distance (radius) smaller than a random number? The smaller distances need to be more likely, and larger distances
            need to trail off exponentially.
        
            </Comment>
            <Annotations>
    
            
            <MathInline> (1/s^2) &lt; < rand </MathInline>       
        </ConnectCondition>
    </ConnectionRule>
</ComponentClass>


<ComponentClass name="Uniform_within_sphere">
    <Annotations>
    <Comment>p is a probability so it does not have a physical dimension.</Comment>
    </Annotations>

    <Parameter name="p", dimension="dimensionless"/>

    <Annotations>
    <Comment>cut_off is a constant distance. In Shyam's code this value is 
    referred to as the radius. This radius takes the value of 100um for a standard 
    dend radius and also a Golgi Cell Apical Dendrite. 
    A MFBundle radius is 70um however.
    A Goc Basolateral dend radius is 60um.
    to summarise cut_off can take the values:
    100,
    70,
    60,
    These three values shall be supplied as a parameter after object instantiation.
    </Comment>
    </Annotations>
    
    <Parameter name="cutoff" dimension="length"/>
    <PropertyRecievePort name="x_src" dimension="length"/>
    <PropertyRecievePort name="x_dst" dimension="length"/>
    <PropertyRecievePort name="y_src" dimension="length"/>
    <PropertyRecievePort name="y_dst" dimension="length"/>
    <PropertyRecievePort name="z_src" dimension="length"/>
    <PropertyRecievePort name="z_dst" dimension="length"/>
    
    
    <ConnectionRule>
        <RandomVariable name="rand" units="um">

        <Annotations>
        <Comment>
         Cleft distances, a radius whose origin is presynaptic.
         
         http://www.uncertml.org/distributions/uniform 
        
        
        This componentclass has two methods for generating a uniform distribution. Choose the one that works.

         </Comment>
         </Annotations>
    
        <un:UniformDistribution xmlns:un="http://www.uncertml.org/2.0">
        <un:minimum>0</un:minimum>
        <un:maximum>cutoff</un:maximum>   
        </un:UniformDistribution>

        </RandomVariable>
            <Annotations>
            <Comment>The following lines effectively mean assigning the Mathinline expression below to the variable s.
            This should make the s the euclidian distance between the source and the destination in x,y and z.
            </Comment>
            <Annotations>
    

        <Alias name="s">
            <MathInline>sqrt((x_source-x_dest)^2+(y_source-y_dest)^2+(z_source-z_dest)^2)</MathInline>       
        </Alias>
    
        <ConnectCondition>
            <Annotations>
            <Comment>The following line describes the left hand side of an asymptote used as a distribution to draw 
            random numbers from, this is used to in certain circumstances to make the probability of connection a 
            negative exponential function of distance. In other circumstnaces the connection condition will be uniform across all distances within a certain range.        



            Note should the mathInline be assigned to something below?
            </Comment>
            <Annotations>
    
            
            <MathInline> ( s < cutoff ) &lt; && ( p < rand ) &lt;  </MathInline>       
        </ConnectCondition>
    </ConnectionRule>
</ComponentClass>




<ComponentClass name="Uniform_for_generating_cell_positions">
    <Annotations>
    <Comment>p is a probability so it does not have a physical dimension.</Comment>
    </Annotations>

    <Parameter name="p", dimension="dimensionless"/>

    <Annotations>
    <Comment>plane type sagitall, axial, dorsal. The plane type specifies which dimension below (x,y or z) 
    that needs to be eliminated in order to convert the considered volume into a considered plane.</Comment>
    </Annotations>



    <Annotations>
    <Comment>
    
    The random number generating for generating _Cell Centre Positions_ should be uniformly distibuted, within the volume
    
    Ie the distribution has constant mean and variance (not centered with any particular mean or variance).
    However the each cell soma root section is first situated on a grid point before it is randomly perturbed, 
    so the length of this grid step needs to be known.
    
    Also this PRNG distribution concerns a 3D grid. At this time it is unclear if there are more than one grid 
    steps in the z direction. Such that only the 2D euclidian distance needs to be considered across a plane 
    (only the area of a circle is considered not a radius of a sphere).
    
    </Comment>
    </Annotations>
    
    <Parameter name="gridstep" dimension="length"/>
    <PropertyRecievePort name="x_src" dimension="length"/>
    <PropertyRecievePort name="x_dst" dimension="length"/>
    <PropertyRecievePort name="y_src" dimension="length"/>
    <PropertyRecievePort name="y_dst" dimension="length"/>
    <PropertyRecievePort name="z_src" dimension="length"/>
    <PropertyRecievePort name="z_dst" dimension="length"/>
    
    
    <ConnectionRule>
        <RandomVariable name="rand" units="um">

        <Annotations>
        <Comment>
         Cleft distances, a radius whose origin is presynaptic.
         
         http://www.uncertml.org/distributions/uniform 
        
        
         This componentclass has two methods for generating a uniform distribution. Choose the one that works.

         </Comment>
         </Annotations>
    
        <un:UniformDistribution xmlns:un="http://www.uncertml.org/2.0">
        <un:minimum>0</un:minimum>
        <un:maximum>gridstep</un:maximum>   
        </un:UniformDistribution>

        </RandomVariable>
            <Annotations>
            <Comment>The following lines effectively mean assigning the Mathinline expression below to the variable s.
            This should make the s the euclidian distance between the source and the destination in x,y and z.
            </Comment>
            </Annotations>
    

        <Alias name="s">
            <MathInline>sqrt((x_source-x_dest)^2+(y_source-y_dest)^2+(z_source-z_dest)^2</MathInline>       
        </Alias>

    
        <ConnectCondition>
            <Annotations>
            <Comment>The equation below is assigned to the connection condition, not to a variable.
            </Comment>
            </Annotations>
    
            
            <MathInline> ( s < gridstep ) &lt; && ( p < rand ) &lt;  </MathInline>       
        </ConnectCondition>
    </ConnectionRule>
</ComponentClass>




<ComponentClass name="Boltzmann">
    <Annotations>
    <Comment>Used to determine GoC2GoC connectivity.    
             Boltzmann distribution PDF - fits a sigmoidal curve. 
             A1 = initial value, A2 = final value, x0 = center, dx = time constant
                    
            
    </Comment>
    </Annotations>
    
    
    <Parameter name="p", dimension="dimensionless"/>
    <Parameter name="A1", dimension="dimensionless"/>
    <Parameter name="A2", dimension="dimensionless"/>
    <Parameter name="x0", dimension="length"/>
    <Parameter name="dx", dimension="time_step"/>

    <Annotations>
    <Comment>cut_off is a constant distance. In Shyam's code this value is 
    referred to as the radius. This radius takes the value of 100um for a standard 
    dend radius and also a Golgi Cell Apical Dendrite. 
    A MFBundle radius is 70um however.
    </Comment>
    </Annotations>
    
    <Parameter name="cutoff" dimension="length"/>
    <PropertyRecievePort name="x_src" dimension="length"/>
    <PropertyRecievePort name="x_dst" dimension="length"/>
    <PropertyRecievePort name="y_src" dimension="length"/>
    <PropertyRecievePort name="y_dst" dimension="length"/>
    <PropertyRecievePort name="z_src" dimension="length"/>
    <PropertyRecievePort name="z_dst" dimension="length"/>
    
    
    <ConnectionRule>
        <RandomVariable name="rand" units="um">

        <Annotations>
        <Comment>
         Cleft distances, a radius whose origin is presynaptic.
         
         http://www.uncertml.org/distributions/uniform 
    
        <un:UniformDistribution xmlns:un="http://www.uncertml.org/2.0">
        <un:minimum>0</un:minimum>
        <un:maximum>cutoff</un:maximum>   
        </un:UniformDistribution>

        </Comment>
        </Annotations>


        </RandomVariable>
            <Annotations>
            <Comment>The following lines effectively mean assigning the Mathinline expression below to the variable s.
            This should make the s the euclidian distance between the source and the destination in x,y and z.
            </Comment>
            <Annotations>
    

        <Alias name="s">
            <MathInline>sqrt((x_source-x_dest)^2+(y_source-y_dest)^2+(z_source-z_dest)^2)</MathInline>       
        </Alias>
    
               
    
        <ConnectCondition>
            <Annotations>
            <Comment>
                From utilities.hoc available at: https://github.com/CNS-OIST/CerebellarCortex
                s = sqrt((xsource-xtarget)^2+(ysource-ytarget)^2+(zsource-ztarget)^2)
 
                ProbGoCtoGoC = ProbGoCtoGoCbase - GoCtoGoCdecayrate * vGoCtoGoCdistances.x[i]
                ProbGoCtoGoC = BoltzmannPDF(s, 171,-1945,267,84) / 100
 

                BoltzmannPDF (x,A1,A2,x0,dx0
                Parameters:
                A1 = initial value, A2 = final value, x0 = center, dx = time constant
                x = $1
                A1 = $2
                A2 = $3
                x0 = $4
                dx = $5
            
 

 
            </Comment>
            <Annotations>
    
                
            
            <MathInline> (A1 - A2)&lt; / (1 + exp ((x - x0)&lt; / dx)&lt;)&lt; + A2< rand </MathInline>       
        </ConnectCondition>
    </ConnectionRule>
</ComponentClass>

    