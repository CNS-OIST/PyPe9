{# This template provides a CVODE exception class

   Authors: Ivan Raikov and Thomas G. Close
   Copyright Okinawa Institute of Science and Technology Graudate University 2014
#}


//------------------------------------------------------//
// This section was generated from solver-preludes.tmpl //
//------------------------------------------------------//
{% if ode_solver in ('cvode', 'ida') %}
	/**
	* Exception to be thrown if a {{solver_prefix}} solver does not return {{solver_abbrev}}_SUCCESS
	* @ingroup KernelExceptions
	*/
    class {{solver_prefix}}SolverFailure: public KernelException {
	  public:
        /**
	     * @note model should be passed from get_name() to ensure that
	     *             names of copied models are reported correctly. 
	     * @param model name of model causing problem
	     * @param status exit status of the {{solver_prefix}} solver
	     */
        {{solver_prefix}}SolverFailure(const std::string& model, const int status)
	     : KernelException("{{solver_prefix}}SolverFailure"),
	       model_(model),
	       status_(status) {}
        ~{{solver_prefix}}SolverFailure() throw() {}
	    
	    std::string message() {
            std::ostringstream msg;
            msg << "In model " << model_ << ", the {{solver_name}} solver "
	            << "returned with exit status " << status_ << ".\n";
	        return msg.str();
	    }
	
	  private:
        const std::string model_;
	    const int status_;
	};

    /* 
     * Check function return value.
     *    opt == 0 means SUNDIALS function allocates memory so check if
     *             returned NULL pointer
     *    opt == 1 means SUNDIALS function returns a flag so check if
     *             flag >= 0
     *    opt == 2 means function allocates memory so check if returned
     *             NULL pointer 
     */
    inline static int check_flag(void *flagvalue, const char *funcname, int opt) {
        int *errflag;
        if (opt == 0 && flagvalue == NULL) {
            /* Check if CVode/IDA function returned NULL pointer - no memory allocated */
            fprintf(stderr, 
                    "\nCVode/IDA error: %s() failed - returned NULL pointer\n\n",
                    funcname);
            return(1); 
        } else if (opt == 1) {
            /* Check if flag < 0 */ 
            errflag = (int *) flagvalue;
            if (*errflag < 0) {
                fprintf(stderr, 
                        "\nCVode/IDA error: %s() failed with flag = %d\n\n",
                        funcname, *errflag);
                return(1);
            }
        } else if (opt == 2 && flagvalue == NULL) {
            /* Check if function returned NULL pointer - no memory allocated */
            fprintf(stderr, 
                    "\nMemory error: %s() failed - returned NULL pointer\n\n",
                    funcname);
            return(1); 
        }
        return(0);
    }

    inline void adjust_zero_crossings (N_Vector v, double abstol) {
        for (int i = 0; i < NV_LENGTH_S(v); i++)
            if (fabs(ITEM(v,i)) < abstol)
                ITEM(v,i) = 0;
        return;
    }
{% endif %}
{% if ss_solver == 'kinsol' %}
    /**
     * Exception to be thrown if a KinSol solver does not return KIN_SUCCESS
     * @ingroup KernelExceptions
     */
    class KINSolverFailure: public KernelException {
      public:
        /**
          * @note model should be passed from get_name() to ensure that
          *             names of copied models are reported correctly. 
          * @param model name of model causing problem
          * @param status exit status of the KINSOL solver
          */
        KINSolverFailure(const std::string& model,
                         const int status)
          : KernelException("KINSolverFailure"),
            model_(model),
            status_(status)
          {}
        
        ~KINSolverFailure() throw() {}
          
        std::string message() {
            std::ostringstream msg;
            msg << "In model " << model_ << ", the KINSOL solver "
                << "returned with exit status " << status_ << ".\n";
            return msg.str();
        }

      private:
        const std::string model_;
        const int status_;
    };
{% endif %}
// ------------------- solver-preludes.tmpl ------------------------//
