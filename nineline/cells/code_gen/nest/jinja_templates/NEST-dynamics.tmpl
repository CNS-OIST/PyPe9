{#
   NEST dynamics template 

   This template defines a C++ function of the form:

   int ModelName_dynamics (double t, N_Vector y, N_Vector f, void* pnode)

   if using the CVODE/IDA solvers, or 

   int ModelName_dynamics (double t, const double y[], double f[], void* pnode)

   if using the GSL ODE solvers.
   The function computes the derivatives of all states defined in the system.

   Template variables are:

   - ode_method: the current used solver method; can be "cvode" "ida" or "gsl"
   - ModelName: the name of the current system
   - localVars: list of strings with the name of all local variables appearing in the system
   - parameterDefs - the parameter equations of the form "name = params->name"
                     which retrieve parameter values from the params structure and assign it
                     to local variables
   - ratePrevEqDefs - a list of equations that retrieve the state values computed at the previous 
                      time step and assign them to local variables
   - eqOrderDefs - topologically sorted list of strings with
                   external, assignment, reaction, pool equations in C++ syntax
   - rateOrderDefs - list of strings with the rate equatins in C++ syntaxa
   
   Authors: Ivan Raikov and Thomas G. Close
   Copyright Okinawa Institute of Science and Technology Graudate University 2014   
#}

//----------------------------------------------------//
// This section was generated from NEST-dynamics.tmpl //
//----------------------------------------------------//


{% for func_name, time_derivatives, states, parameters, aliases in dynamics %} 
    {% if ode_method in ('cvode', 'ida') %}
extern "C" int {{func_name}} (double t, N_Vector y, N_Vector f, void* pnode) {
    {% else %}
extern "C" int {{func_name}} (double t, const double y[], double f[], void* pnode) {
    {% endif %}

    // Get a pointer to the model parameters
    assert(pnode);    
    const struct {{ModelName}}::Parameters_* params;
    params = &(reinterpret_cast<{{ModelName}}*>(pnode)->P_);
   
    {% for param in parameters %}
    const double_t {{param}} = params->{{param}};
    {% endfor %}
   
    {% for alias in aliases %}
    const double_t {{alias.lhs}} = {{alias.rhs}};
    {% endfor %}
    
    {% for state in states %}
    const double_t {{state.name}} = y[{{ModelName}}::State_::{{state.name}}_i];
    {% endfor %}

    {% for td in time_derivatives %}
    f[{{ModelName}}::State_::{{td.dependent_variable}}_i] = {{td.rhs}};
    {% endfor %}

    {% if ode_method in ('cvode', 'ida') %}
    return 0;
    {% else %}
    return GSL_SUCCESS;
    {% endif %}
}    
{% endfor %}



// ------------------- NEST-dynamics.tmpl ------------------------//
