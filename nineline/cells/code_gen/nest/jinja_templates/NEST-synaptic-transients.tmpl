{#
   NEST synaptic event transient template 

   This template defines C++ methods of the form:

   int ModelName::synapticEvent_transients (long_t lag)

   These methods update the synaptic states when a spike is received.
   They are invoked by the event handling portion of the update method,
   which is generated by template "NEST-solver-events.tmpl".

   Template variables are:

   - ModelName: the name of the current system
   - synapticEventDefs - a list of synaptic event objects that have the following fields:

     - pscName - descriptive name (label) of the post-synaptic conductance component
     - pscId - unique identifier of the post-synaptic conductance component
     - localVars - local variables used in the state update equations
     - eventVarEqDef - the equation that assigns the event variable its value
       (currently, this is the equation that reads the synaptic weight from the event queue)
     - eventVar - the name of the variable the receives the event argument (e.g. weight)
     - externalEventEqDef - the equations that assigns values to any imported quantities, e.g. voltage
     - transientEventEqDefs - the equations that update the synaptic states
   
   Authors: Ivan Raikov and Thomas G. Close
   Copyright Okinawa Institute of Science and Technology Graudate University 2014
#}

//---------------------------------------------------------------//
// This section was generated from NEST-synaptic-transients.tmpl //
//---------------------------------------------------------------//

{% for func_name, state_assignments, req_defs in transients %}
inline int {{ModelName}}::{{func_name}}(long_t lag) {
    
    // Map parameters used in dynamics to current namespace
    {% for param in req_defs.parameters %}
    const double_t {{param.name}} = P_.{{param.name}};
    {% endfor %}

    // Map port buffers to current namespace
    {% for port in req_defs.ports %}
    const double_t {{port.name}} = B_.{{port.name}}_value;
    {% endfor %}
    
    // Map states used in dynamics to current namespace
    {% for state in req_defs.states %}
    const double_t {{state.name}} = S_.y_[{{ModelName}}::State_::{{state.name}}_INDEX];
    {% endfor %}
   
    // Evaluate aliases used in differential equations
    {% for alias in req_defs.aliases %}
    const double_t {{alias.lhs}} = {{alias.rhs}};
    {% endfor %}

    // Evaluate differential equations
    {% for assign in state_assignments %}
    S_.y_[{{ModelName}}::State_::{{assign.lhs}}_INDEX] = {{assign.rhs}};
    {% endfor %}
}
{% endfor %}
//-------------- NEST-synaptic-transients.tmpl --------------//