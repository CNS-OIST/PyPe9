{# This template adds State class constructors and assignments

   Authors: Ivan Raikov and Thomas G. Close
   Copyright Okinawa Institute of Science and Technology Graudate University 2014
#}


//------------------------------------//
// From NEST-init.tmpl //
//------------------------------------//

/**
 * Construct state from parameters.
 */
{{modelName}}::State_::State_(const Parameters_& p) {
{# Don't think this is needed as well
{% if init.localVars %}
   double {{init.localVars | join(", ")}};
{% endif %}
#}

    const Parameters_ *params = &p;

{% if (ODEmethod == "gsl") %}
    r_ = 0;
{% endif %}

{# Initialise the state #}
{% for state, val in izip(state_variables, state_variables_init) %}
    y_[{{state}}_i] = {{val}};
{% endfor %}
{# Check constraints on parameters, does this belongs here? #}
{% for constraint in parameter_constraints %}
    {{constraint}}
{% endfor %}

{# Solve steady-state if required #}
{# This needs some thinking out
{% if steady_state %}
    {% if (SSmethod  == "kinsol") %}
  N_Vector {{SSvector}};
  ssvect = N_VNew_Serial({{steadyStateSize}});
  fsolve ({{modelName}}_steadystate, {{steadyStateSize}}, {{SSvector}},
          (void *)&p,  "{{modelName}}");
        {% for name in rateEqStates %}
            {% if (name in steadyStateIndexMap) %}
   y_[{{stateIndexMap[name]}}] = Ith({{SSvector}}, {{steadyStateIndexMap[name]}});
            {% else %}
   y_[{{stateIndexMap[name]}}] = {{name}};
            {% endif %}
        {% endfor %}
   N_VDestroy_Serial ({{SSvector}});
    {% else %}
   gsl_vector *{{SSvector}};
   {{SSvector}} = gsl_vector_alloc ({{steadyStateSize}});
   fsolve ({{modelName}}_steadystate, {{steadyStateSize}}, {{SSvector}},
           (void *)&p, "{{modelName}}");             
        {% for name in init.rateEqStates %}
            {% if (name in steadyStateIndexMap) %}
   y_[{{stateIndexMap[name]}}] = gsl_vector_get({{SSvector}}, {{steadyStateIndexMap[name]}});
            {% else %}
   y_[{{stateIndexMap[name]}}] = {{name}};
            {% endif %}
        {% endfor %}
   gsl_vector_free ({{SSvector}});
        {% for eq in init.reactionEqDefs %}
   {{eq}}
        {% endfor %}
        {% for eq in currentEqDefs %}
   {{eq}}
        {% endfor %}
        {% if ("v" in steadyStateIndexMap) %}
   y_[{{steadyStateIndexMap["v"]}}] =  v;
        {% endif %}
    {% endif %}
{% endif %}
#}
}

/**
 * Copy constructor for State class
 */
{{modelName}}::State_::State_(const State_& s) {

{% if (ODEmethod == "gsl") %}
  r_ = s.r_;
{% endif %}
        
  for ( int i = 0 ; i < {{num_states}} ; ++i )
      y_[i] = s.y_[i];

}

/**
 * Assignment of a State from another State
 */
{{modelName}}::State_& {{modelName}}::State_::operator=(const State_& s) {

{% if (ODEmethod == "gsl") %}
  r_ = s.r_;
{% endif %}
        
  assert(this != &s);  
  for ( size_t i = 0 ; i < {{num_states}} ; ++i )
       y_[i] = s.y_[i];

  return *this;

}
